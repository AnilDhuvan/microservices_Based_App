package com.p1.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.p1.dto.ProductDto;
import com.p1.service.ProductService;

import io.swagger.v3.oas.annotations.parameters.RequestBody;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/products")
@RequiredArgsConstructor
public class ProductController {

    private final ProductService productService;

 // Build Add Product REST API
    @PostMapping
    public ResponseEntity<ProductDto> create(@RequestBody ProductDto dto) {
    	 ProductDto saveProduct = productService.createProduct(dto);
 	    return new ResponseEntity<>(saveProduct,HttpStatus.CREATED);
    }
    
  //Build Get Product Rest ApI
    @GetMapping("/{id}")
    public ResponseEntity<ProductDto> get(@PathVariable("id") String id) {
    	ProductDto productByID = productService.getProductById(id);
    		return ResponseEntity.ok(productByID);
    	
    }

  //Build Get All Product  Rest ApI
    @GetMapping
    public ResponseEntity<List<ProductDto>> getAll() {
    	List<ProductDto> allProduct = productService.getAllProducts();
		return new ResponseEntity<List<ProductDto>>(allProduct ,HttpStatus.OK);
    }

    @PutMapping("/{id}")
    public ResponseEntity<ProductDto> update(@PathVariable("id") String id, @RequestBody ProductDto dto) {
        
    		ProductDto updateProduct = productService.updateProduct(id, dto);
    		return new ResponseEntity<ProductDto>(updateProduct,HttpStatus.OK);
    	}
    	
    	return ResponseEntity.ok(productService.updateProduct(id, dto));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable String id) {
        productService.deleteProduct(id);
        return ResponseEntity.noContent().build();
    }
}

package com.p1.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.p1.dto.ProductDto;
import com.p1.entity.Product;
import com.p1.exception.ResourceNotFoundException;
import com.p1.mapper.ProductMapper;
import com.p1.repository.ProductRepository;
import com.p1.service.ProductService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ProductServiceImpl implements ProductService {

    private ProductRepository productRepository;

 
    public ProductDto createProduct(ProductDto dto) {
        Product product = ProductMapper.mapToProduct(dto);
        Product savedProduct = productRepository.save(product);
        return ProductMapper.mapToProductDto(savedProduct);
    }

    
    public ProductDto getProductById(String id) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Product not found with id: " + id));
        return ProductMapper.mapToProductDto(product);
    }

   
    public List<ProductDto> getAllProducts() {
        List<Product> products = productRepository.findAll();
        
		return products.stream().map((product) -> ProductMapper.mapToProductDto(product)).collect(Collectors.toList());
    }

   
    public ProductDto updateProduct(String id, ProductDto dto) {
        Product existing = productRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Product not found with id: " + id));

        existing.setName(dto.getName());
        existing.setDescription(dto.getDescription());
        existing.setPrice(dto.getPrice());
        existing.setStock(dto.getStock());

        Product updatedProduct = productRepository.save(existing);
        
        return ProductMapper.mapToProductDto(updatedProduct);
    }

    
    public void deleteProduct(String id) {
    	
    	productRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Product is not exists with given id: " + id));
		
        productRepository.deleteById(id);
    }
}

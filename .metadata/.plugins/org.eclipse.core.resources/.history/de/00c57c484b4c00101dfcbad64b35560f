package com.p1.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.p1.dto.UserDto;
import com.p1.entity.User;
import com.p1.exception.ResourceNotFoundException;
import com.p1.mapper.UserMapper;
import com.p1.repository.UserRepo;
import com.p1.service.UserService;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class UserServiceImpl implements UserService{
	
	
	private UserRepo  repo;
	
	
	public UserDto createUser(UserDto user) {
		User mapToUser = UserMapper.mapToUser(user);
		User saveUser = repo.save(mapToUser);
		return UserMapper.mapToUserDto(saveUser);
	}

	
	public UserDto getUserByID(Long userId) {
		User user = repo.findById(userId)
				 .orElseThrow(()-> 
				 new ResourceNotFoundException("User is not exists with given id : " + userId));
				return UserMapper.mapToUserDto(user);
	}


	public UserDto updateUser(Long userId, UserDto updatedUser) {
		
		User user = repo.findById(userId).orElseThrow(()-> 
		new ResourceNotFoundException("User is not exists with given id :"+ userId));
		
		user.setFastName(updatedUser.getFastName());
		user.setLastName(updatedUser.getLastName());
		user.setEmail(updatedUser.getEmail());
		user.setPassword(updatedUser.getPassword());
		
		User updateUser = repo.save(user);
		
		return UserMapper.mapToUserDto(updateUser);
	}

	
	public List<UserDto> getAllUser() {
		 List<User> users = repo.findAll();
			return users.stream().map((user) -> UserMapper.mapToUserDto(user)).collect(Collectors.toList());
			
	}


	public void deleteUser(Long userId) {
User user = repo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User is not exists with given id: " + userId));
		
		repo.deleteById(userId);
		
	}

}
